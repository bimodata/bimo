import { Item, ExtendedItemProps } from "@bimo/core-utils-collection";
import { VariantsCollection } from "./VariantsCollection";
import { RouteVersion } from "./RouteVersion";
export interface RouteProps extends ExtendedItemProps {
  bimoId?: string;
  rteVersion?: string;
  rteIdentifier?: string;
  _rteDescription?: string;
  rteDirection?: string;
  rteServiceType?: string;
  rteServiceMode?: string;
  rteGarage?: string;
  rteGroup?: string;
  rteMainColorRgb?: string;
  rteSecondaryColorRgb?: string;
  rteMainColorAdjustedRgb?: string;
  rteSecondaryColorAdjustedRgb?: string;
  rtePubIdSpec?: string;
  rteForPublicInfo?: string;
  rtePublicRating?: string;
  rteReliability?: string;
  rtePubDir_1?: string;
  rtePubDir_2?: string;
  rteBasicVarDir_1?: string;
  rteBasicVarDir_2?: string;
  rteUrl?: string;
  rteMainPpatDir_1?: string;
  rteMainPpatDir_2?: string;
  rteDriverPpat_1?: string;
  rteDriverPpat_2?: string;
  rtePublicPpat_1?: string;
  rtePublicPpat_2?: string;
  rteSchedulerPpat_1?: string;
  rteSchedulerPpat_2?: string;
  rteDistrict?: string;
  rteZone?: string;
  rteIsCancelled?: string;
  variants: VariantsCollection;
}
export declare class Route extends Item<Route> {
  bimoId?: string;
  rteVersion?: string;
  rteIdentifier?: string;
  _rteDescription?: string;
  rteDirection?: string;
  rteServiceType?: string;
  rteServiceMode?: string;
  rteGarage?: string;
  rteGroup?: string;
  rteMainColorRgb?: string;
  rteSecondaryColorRgb?: string;
  rteMainColorAdjustedRgb?: string;
  rteSecondaryColorAdjustedRgb?: string;
  rtePubIdSpec?: string;
  rteForPublicInfo?: string;
  rtePublicRating?: string;
  rteReliability?: string;
  rtePubDir_1?: string;
  rtePubDir_2?: string;
  rteBasicVarDir_1?: string;
  rteBasicVarDir_2?: string;
  rteUrl?: string;
  rteMainPpatDir_1?: string;
  rteMainPpatDir_2?: string;
  rteDriverPpat_1?: string;
  rteDriverPpat_2?: string;
  rtePublicPpat_1?: string;
  rtePublicPpat_2?: string;
  rteSchedulerPpat_1?: string;
  rteSchedulerPpat_2?: string;
  rteDistrict?: string;
  rteZone?: string;
  rteIsCancelled?: string;
  variants: VariantsCollection;
  _links: {
    [linkType: string]: any;
  };
  constructor(props: RouteProps);
  get rteDescription(): string;
  set rteDescription(v: string);
  get isProductiveOnly(): boolean;
  get isNonProductiveOnly(): boolean;
  addLink(type: string, value: any): void;
  getLink(type: string): any;
  removeLink(type: string): void;
  /** Creates a new instance of a route. All variants are new instances too.*/
  copy(newRteIdentifier?: string | undefined): Route;
  get shortLoggingOutput(): string;
  get mediumLoggingOutput(): string;
  getVariantsThatUseOneOfThesePlaces(
    listOfPlaces: string | Set<string> | string[]
  ): import("./Variant").Variant[] | undefined;
  getVariantById(variantId: any): import("./Variant").Variant | undefined;
  get routeVersion(): RouteVersion | undefined;
}
export default Route;
